using Gemini.NET;
using Microsoft.EntityFrameworkCore;
using Models.Enums;
using System.Text.RegularExpressions;
using WordWise.Api.Data;
using WordWise.Api.Models.Domain;
using WordWise.Api.Models.Dto.WritingExercise;
using WordWise.Api.Repositories.Interface;
using WordWise.Api.Services.Interface;

namespace WordWise.Api.Services.Implement
{
    public class WritingExerciseService : IWritingExerciseService
    {
        private readonly IWritingExerciseRepository _writingExerciseRepository;
        private readonly WordWiseDbContext dbContext;
        private readonly ICacheService _cacheService;

        public WritingExerciseService(IWritingExerciseRepository writingExerciseRepository, WordWiseDbContext dbContext, ICacheService cacheService)
        {
            _writingExerciseRepository = writingExerciseRepository;
            _cacheService = cacheService;
            this.dbContext = dbContext;
        }

        public async Task<ResponseAutoGenerateDto> AutoGenerateByAi(WritingExercise writingExercise)
        {
            // Retrieve API Key
            var userId = writingExercise.UserId;
            if (string.IsNullOrEmpty(userId))
            {
                throw new ArgumentException("UserId is missing for the writing exercise.");
            }

            string apiKey;
            bool hasApiKey = _cacheService.TryGetApiKey(userId, out apiKey);
            if (!hasApiKey)
            {
                throw new InvalidOperationException("API Key not found for this user.");
            }

            // Validate API Key
            var generator = new Generator(apiKey);
            bool isValid = await generator.IsValidApiKeyAsync();
            if (!isValid)
            {
                throw new InvalidOperationException("API key is invalid or expired.");
            }

            await using var trans = await dbContext.Database.BeginTransactionAsync();

            try
            {
                string topicInstruction;
                if (string.IsNullOrEmpty(writingExercise.Topic))
                {
                    topicInstruction = "ngẫu nhiên";
                }
                else
                {
                    topicInstruction = $"liên quan đến chủ đề: **{writingExercise.Topic}**";
                }

                writingExercise.Topic = "None";
                var test =  await _writingExerciseRepository.CreateAsync(writingExercise);
                if (test == null)
                {
                    throw new InvalidOperationException("You are limited to creating only 5 writing topics.");
                }

                string prompt =
                    $@"Bạn là một chuyên gia ngôn ngữ và chuyên gia ra đề thi chuẩn quốc tế! 🎓  
                        Hãy tạo một chủ đề viết luận {topicInstruction} theo đúng tiêu chuẩn của các kỳ thi ngôn ngữ học thuật (IELTS, TOEFL, Cambridge, v.v.).  
                        Ngôn ngữ yêu cầu: **{writingExercise.LearningLanguage}**.  
                        📌 **Phản hồi của bạn phải theo định dạng sau:**  

                        --**Đề tài**--  
                        [viết đề tài ra đây]

                        ⚠️ **Yêu cầu:** 
                        - Chủ đề phải phù hợp với bài luận học thuật, có thể thuộc các lĩnh vực như xã hội, công nghệ, giáo dục, môi trường, văn hóa…  
                        - Không quá đơn giản hoặc quá khó, đảm bảo phù hợp với người học ngôn ngữ.  
                        - Không giải thích, chỉ cần đưa ra chủ đề theo đúng định dạng yêu cầu.  
                        Hãy tạo ra một chủ đề thú vị ngay bây giờ! ";

                var apiRequestBuilder = new ApiRequestBuilder()
                .WithPrompt(prompt)
                .WithDefaultGenerationConfig(temperature: 0.85F)
                .Build();

                var modelVersion = ModelVersion.Gemini_20_Flash;

                var response = await generator.GenerateContentAsync(apiRequestBuilder, modelVersion);
                string topic = ExtractTopic(response.Result);

                await _writingExerciseRepository.UpdateTopic(test.WritingExerciseId, topic);
                
                await trans.CommitAsync();

                return new ResponseAutoGenerateDto
                {
                    WritingExerciseId = test.WritingExerciseId,
                    Topic = topic,
                };
            }
            catch (Exception)
            {
                await trans.RollbackAsync();
                throw;
            }
        }

        public async Task<string> GetFeedBackFromAi(Guid writingExerciseId)
        {
            // Get Content
            var writingExercise = await _writingExerciseRepository.GetByIdAsync(writingExerciseId);
            if (writingExercise == null)
            {
                throw new ArgumentException($"Writing exercise with ID {writingExerciseId} not found.");
            }

            // Validate Writing Exercise Fields
            if (string.IsNullOrEmpty(writingExercise.Content) ||
                string.IsNullOrEmpty(writingExercise.Topic) ||
                string.IsNullOrEmpty(writingExercise.NativeLanguage) ||
                string.IsNullOrEmpty(writingExercise.LearningLanguage))
            {
                throw new ArgumentException("Invalid writing exercise data. Please ensure all required fields are filled.");
            }

            // Retrieve API Key
            var userId = writingExercise.UserId;
            if (string.IsNullOrEmpty(userId))
            {
                throw new ArgumentException("UserId is missing for the writing exercise.");
            }

            string apiKey;
            bool hasApiKey = _cacheService.TryGetApiKey(userId, out apiKey);
            if (!hasApiKey)
            {
                throw new InvalidOperationException("API Key not found for this user.");
            }

            // Validate API Key
            var generator = new Generator(apiKey);
            bool isValid = await generator.IsValidApiKeyAsync();
            if (!isValid)
            {
                throw new InvalidOperationException("API key is invalid or expired.");
            }

            /*string prompt = 
                $@"Bạn là một trợ lý tuổi teen siêu cool! chuyên đánh giá và phản hồi về các bài viết một cách chuyên nghiệp bạn từng thi bài luyện viết top 1 thê giới, đặc biệt chú trọng vào việc hỗ trợ người học ngôn ngữ.Hãy phân tích bài viết người dùng cung cấp và đưa ra phản hồi chi tiết, hữu ích, và thiên thiện hài hước đừng quá máy móc tập trung vào các khía cạnh sau:
                
                * *Thông tin bài viết: **
                    *Chủ đề bài viết: { writingExercise.Topic}
                    *Nội dung bài viết: { writingExercise.Content} (cần bạn kiểm tra nếu bài biết không được viết đúng ngôn ngữ {writingExercise.LearningLanguage} được xem là sai đề)
                    *Ngôn ngữ gốc của người viết: { writingExercise.NativeLanguage}
                    *Ngôn ngữ đang học: { writingExercise.LearningLanguage}

                1.  * *Phân tích bài viết: **
                    *a.Đưa ra số điểm trên thang điểm 100 của bài viết tập trung vào các tiêu chí sau (đưa ra tổng điểm trước):
                        1. **Tính liên quan đến chủ đề** (20 điểm): Đánh giá mức độ liên quan của nội dung bài viết với chủ đề '{writingExercise.Topic}'.
                        2. **Cấu trúc tổ chức bài viết** (20 điểm): Đánh giá cách tổ chức mở bài, thân bài, kết luận và cách chuyển ý.
                        3. **Ngữ pháp, chính tả, và từ vựng** (30 điểm): Phân tích chi tiết ngữ pháp, chính tả, và lựa chọn từ ngữ trong {writingExercise.LearningLanguage}. Chỉ ra các lỗi (nếu có).
                        4. **Phong cách viết** (15 điểm): Đánh giá sự hấp dẫn, tính mạch lạc, và việc sử dụng ví dụ minh họa.
                        5. **Sáng tạo và độc đáo** (15 điểm): Đánh giá tính mới mẻ, độc đáo của ý tưởng bài viết.
                     *b.Đánh giá tính liên quan của nội dung bài viết đến chủ đề '{writingExercise.Topic}'.
                     *c.Đánh giá cấu trúc tổ chức bài viết(mở đầu, thân bài, kết luận).
                     *d.Đánh giá chi tiết tính chính xác của ngữ pháp, chính tả và lựa chọn từ ngữ trong { writingExercise.LearningLanguage} (Chỉ ra những lỗi đó nếu có không cần viết lại toàn bộ bài).
                     *e.Đánh giá phong cách viết(sự hấp dẫn, sử dụng ví dụ hoặc hình ảnh minh họa).
                     *f.Đánh giá tính độc đáo và sáng tạo của ý tưởng về '{writingExercise.Topic}'.
                    (!!!Lưu ý: Khi chỉnh lại câu viết của bài thì bắt buộc phải viết nghiêm túc)

                2.  * *Phản hồi chi tiết: **
                    *Nêu rõ những điểm mạnh của người liên quan đến '{writingExercise.Topic}' trong { writingExercise.LearningLanguage} 1 cách ngắn gọn.
                    *Đưa ra các lĩnh vực cần cải thiện và gợi ý cụ thể để nâng cao kỹ năng sử dụng { writingExercise.LearningLanguage}.
                    *Đảm bảo phản hồi rõ ràng, hữu ích và mang tính xây dựng.

                **Lưu ý quan trọng: **
                    *Viết phản hồi hoàn toàn bằng { writingExercise.NativeLanguage} và đi thằng vào vấn đề không cần chào hỏi.
                    *Nếu bài viết dùng khác ngôn ngữ {writingExercise.LearningLanguage} được xem là sai đề.
                    *Đảm bảo phản hồi tự nhiên, chính xác và phù hợp với { writingExercise.NativeLanguage}.
                    *Duy trì giọng điệu tuổi teen, năng động, hợp trend, dí dỏm, sến , tích cực trong phản hồi và khi sửa bài thì phải chuyên nghiệp.
                    *Tập trung vào việc giúp người viết cải thiện bài viết về '{writingExercise.Topic}' và tập luyện nhiều trên app WordWide của chúng tôi có các tính năng học flashcard, luyện viết, trắc nghiệm bài đọc, kho từ điển xịn sò .";
*/
            string prompt =
             $@"Bạn là một trợ lý tuổi teen siêu cool, từng thi viết đứng top thế giới! 🎖️ Nhiệm vụ của bạn là đánh giá và phản hồi bài viết của người dùng một cách chuyên nghiệp đúng tiêu chuẩn của các kỳ thi ngôn ngữ học thuật (IELTS, TOEFL, Cambridge, v.v.), nhưng vẫn thân thiện, hài hước, và không máy móc. Đặc biệt, hãy giúp họ cải thiện kỹ năng ngôn ngữ với phản hồi chi tiết và hữu ích!  

            🔥 **Thông tin bài viết:**  
               - **Chủ đề:** {writingExercise.Topic}  
               - **Nội dung:** {writingExercise.Content}  
                 👉 *Kiểm tra xem bài viết có đúng ngôn ngữ {writingExercise.LearningLanguage} không. Nếu không, xem như sai đề!*  
               - **Ngôn ngữ mẹ đẻ của tác giả:** {writingExercise.NativeLanguage}  
               - **Ngôn ngữ đang học:** {writingExercise.LearningLanguage}  

            🎯 **1. Đánh giá tổng quan (Thang điểm 100):**  
               📌 *Chấm điểm dựa trên 5 tiêu chí, ghi tổng điểm trước!*  
               - 🎯 **Tính liên quan đến chủ đề (20 điểm):** Nội dung bám sát chủ đề *{writingExercise.Topic}* đến đâu?  
               - 🏗️ **Cấu trúc bài viết (20 điểm):** Cách tổ chức mở bài - thân bài - kết luận có hợp lý không? Có mượt mà không?  
               - ✍️ **Ngữ pháp, chính tả, từ vựng (30 điểm):** Có lỗi sai không? Dùng từ có chính xác không? Ghi rõ lỗi sai nhưng *không cần viết lại toàn bộ bài*.  
               - 🎭 **Phong cách viết (15 điểm):** Văn phong có hấp dẫn không? Có ví dụ minh họa không?  
               - 💡 **Sáng tạo & độc đáo (15 điểm):** Ý tưởng có mới mẻ, thú vị không?  

            🧐 **2. Phân tích chi tiết:**  
               - ✅ Đánh giá nội dung có đúng trọng tâm chủ đề không?  
               - ✅ Cấu trúc bài viết có mạch lạc không? Có phần chuyển ý hợp lý không?  
               - ✅ Ngữ pháp & chính tả: *Chỉ ra lỗi sai và giải thích, không cần viết lại cả bài.*  
               - ✅ Phong cách viết: Có thu hút không? Có sử dụng ví dụ/hình ảnh minh họa không?  
               - ✅ Sáng tạo: Ý tưởng có mới lạ không? Có cách tiếp cận nào đặc biệt không?  

            💡 **3. Phản hồi xây dựng:**  
               - 🌟 Điểm mạnh: Bài viết có gì hay, ấn tượng?  
               - 🔧 Cần cải thiện: Những điểm nào nên chỉnh sửa? Gợi ý cụ thể để cải thiện cách viết trong {writingExercise.LearningLanguage}.  

            ⚠️ **Lưu ý quan trọng:**  
               - 📝 *Phản hồi hoàn toàn bằng {writingExercise.NativeLanguage}, không chào hỏi, đi thẳng vào vấn đề!*  
               - ❌ Nếu bài viết không dùng {writingExercise.LearningLanguage}, báo lỗi ngay!  
               - 😎 Giữ phong cách năng động, hợp trend, hài hước nhưng vẫn chuyên nghiệp khi sửa bài.  
               - 🎯 Nhấn mạnh vào cách cải thiện bài viết về *{writingExercise.Topic}*.  
               - 🚀 Gợi ý người dùng luyện tập nhiều hơn trên app WordWide với flashcard, bài luyện viết, trắc nghiệm đọc hiểu và kho từ điển xịn sò!  

            🔥 **Hãy giúp người dùng tiến bộ thật nhanh với phản hồi chất lượng nhất!** 🚀";


            var apiRequestBuilder = new ApiRequestBuilder()
                .WithPrompt(prompt)
                .WithDefaultGenerationConfig(temperature: 0.85F)
                .Build();

            var modelVersion = ModelVersion.Gemini_20_Flash;

            try
            {
                // Call AI Service and Generate Feedback
                var response = await generator.GenerateContentAsync(apiRequestBuilder, modelVersion);

                if (string.IsNullOrEmpty(response.Result))
                {
                    throw new InvalidOperationException("Failed to generate feedback from Gemini AI.");
                }

                // Save Feedback in Repository
                await _writingExerciseRepository.UpdateFeedback(writingExerciseId, response.Result);

                // Return Feedback
                return response.Result;
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException("An error occurred while processing the feedback.");
            }

        }

        private string ExtractTopic(string response)
        {
            var match = Regex.Match(response, @"--\*\*Đề tài\*\*--\s*\n(.+)", RegexOptions.Singleline);
            return match.Success ? match.Groups[1].Value.Trim() : "Không tìm thấy đề tài!";
        }

    }
}
